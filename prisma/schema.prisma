generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int           @id @default(autoincrement())
  status      Boolean       @default(false)
  role        UserRole      @default(EMPLOYEE)
  password    String
  email       String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  contract    String?
  cv          String?
  declaration String?
  profile     Profiles?
  supervisor  Supervisor?
  files       Files[]
  project     Projects[]
  subTasks    TaskOnUsers[]
  area        WorkAreas[]
  Levels      Levels[]
  reports     Reports[]
  list        ListOnUsers[]
}

model GeneralFiles {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  dir       String?
  createdAt DateTime @default(now())
}

model Profiles {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  dni         String   @unique @db.VarChar(8)
  phone       String?  @unique
  updatedAt   DateTime @updatedAt
  degree      String?
  job         String?
  description String?
  userId      Int      @unique
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sector {
  id           Int            @id @default(autoincrement())
  name         String
  specialities Specialities[]
}

model Specialities {
  id               Int                @id @default(autoincrement())
  name             String
  cod              String?
  sectorId         Int?
  createdAt        DateTime           @default(now())
  Sector           Sector?            @relation(fields: [sectorId], references: [id])
  typeSpecialities TypeSpecialities[]
}

model TypeSpecialities {
  id             Int           @id @default(autoincrement())
  name           String
  specialitiesId Int?
  projects       Projects[]
  Specialities   Specialities? @relation(fields: [specialitiesId], references: [id])
}

model Projects {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  percentage       Int               @default(30)
  department       String?
  province         String?
  district         String?
  CUI              String?
  startDate        DateTime          @default(now())
  untilDate        DateTime
  status           Boolean           @default(false)
  unique           Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int
  typeSpecialityId Int?
  groupId          Int?
  company          Company?
  consortium       Consortium?
  specialists      PersonBussiness[]
  group            GroupProjects?    @relation(fields: [groupId], references: [id])
  typeSpeciality   TypeSpecialities? @relation(fields: [typeSpecialityId], references: [id])
  moderator        Users             @relation(fields: [userId], references: [id])
  areas            WorkAreas[]
  stages           Stages[]
}

model Stages {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  levels    Levels[]
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model GroupProjects {
  id       Int        @id @default(autoincrement())
  name     String?
  projects Projects[]
}

model Levels {
  id        Int        @id @default(autoincrement())
  item      String
  name      String
  level     Int        @default(0)
  rootLevel Int
  isProject Boolean    @default(false)
  isArea    Boolean    @default(false)
  isInclude Boolean    @default(false)
  stagesId  Int
  userId    Int?
  rootId    Int
  subTasks  SubTasks[]
  user      Users?     @relation(fields: [userId], references: [id])
  stages    Stages     @relation(fields: [stagesId], references: [id], onDelete: Cascade)
}

model TaskOnUsers {
  subtaskId  Int
  userId     Int
  assignedAt DateTime @default(now())
  percentage Int      @default(0)
  untilDate  DateTime @default(now())
  subtask    SubTasks @relation(fields: [subtaskId], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([subtaskId, userId])
}

model Feedback {
  id         Int      @id @default(autoincrement())
  comment    String?
  status     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subTasksId Int
  subTasks   SubTasks @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
  files      Files[]
}

model Files {
  id         Int       @id @default(autoincrement())
  name       String
  userId     Int
  dir        String?
  type       FileTypes
  subTasksId Int
  feedbackId Int?
  assignedAt DateTime  @default(now())
  feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  subTasks   SubTasks  @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
  user       Users     @relation(fields: [userId], references: [id])
}

model PersonBussiness {
  id         Int       @id @default(autoincrement())
  name       String
  dni        String    @db.VarChar(8)
  cip        Int
  career     String
  phone      String
  pdf        String?
  projectsId Int?
  Projects   Projects? @relation(fields: [projectsId], references: [id])
}

model Consortium {
  id        Int       @id @default(autoincrement())
  name      String
  manager   String
  projectId Int       @unique
  companies Company[]
  project   Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Company {
  id           Int         @id @default(autoincrement())
  name         String
  ruc          String
  manager      String
  percentage   Int         @default(100)
  consortiumId Int?
  projectId    Int?        @unique
  Consortium   Consortium? @relation(fields: [consortiumId], references: [id])
  project      Projects?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Reports {
  id          Int                   @id @default(autoincrement())
  name        String
  status      ReportStatus          @default(PROCESS)
  stage       ReportStage           @default(STEP_1)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  userId      Int?
  user        Users?                @relation(fields: [userId], references: [id])
  supervisors SupervisorOnReports[]
}

model List {
  id        Int           @id @default(autoincrement())
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     ListOnUsers[]
}

model ListOnUsers {
  usersId    Int
  listId     Int
  user       Users       @relation(fields: [usersId], references: [id], onDelete: Cascade)
  list       List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  status     ListDetails
  assignedAt DateTime    @default(now())

  @@id([usersId, listId])
}

model Supervisor {
  id      Int                   @id @default(autoincrement())
  type    SupervisorTypes
  userId  Int                   @unique
  user    Users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports SupervisorOnReports[]
}

model SupervisorOnReports {
  supervisorId Int
  reportId     Int
  comments     String?
  supervisor   Supervisor @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  report       Reports    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@id([supervisorId, reportId])
}

model WorkAreas {
  id         Int          @id @default(autoincrement())
  name       String
  userId     Int?
  projectId  Int
  item       String       @default("")
  stageId    Int?
  indexTasks IndexTasks[]
  project    Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       Users?       @relation(fields: [userId], references: [id])
}

model IndexTasks {
  id         Int        @id @default(autoincrement())
  name       String
  unique     Boolean    @default(false)
  workAreaId Int
  item       String     @default("")
  workArea   WorkAreas  @relation(fields: [workAreaId], references: [id], onDelete: Cascade)
  subTasks   SubTasks[]
  tasks      Tasks[]
}

model Tasks {
  id          Int          @id @default(autoincrement())
  name        String
  unique      Boolean      @default(false)
  indexTaskId Int
  item        String       @default("")
  subTasks    SubTasks[]
  tasks_2     Task_lvl_2[]
  indexTask   IndexTasks   @relation(fields: [indexTaskId], references: [id], onDelete: Cascade)
}

model Task_lvl_2 {
  id       Int          @id @default(autoincrement())
  name     String
  unique   Boolean      @default(false)
  taskId   Int
  item     String       @default("")
  subTasks SubTasks[]
  task     Tasks        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tasks_3  Task_lvl_3[]
}

model Task_lvl_3 {
  id        Int        @id @default(autoincrement())
  name      String
  unique    Boolean    @default(false)
  item      String     @default("")
  task_2_Id Int
  subTasks  SubTasks[]
  task_2    Task_lvl_2 @relation(fields: [task_2_Id], references: [id], onDelete: Cascade)
}

model SubTasks {
  id          Int           @id @default(autoincrement())
  status      TaskRole      @default(UNRESOLVED)
  item        String        @default("")
  name        String
  description String?
  percentage  Int           @default(0)
  price       Decimal       @db.Money
  hours       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  taskId      Int?
  indexTaskId Int?
  task_2_Id   Int?
  task_3_Id   Int?
  hasPDF      Boolean       @default(false)
  levels_Id   Int?
  feedBacks   Feedback[]
  files       Files[]
  indexTask   IndexTasks?   @relation(fields: [indexTaskId], references: [id], onDelete: Cascade)
  Levels      Levels?       @relation(fields: [levels_Id], references: [id])
  task        Tasks?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  task_lvl_2  Task_lvl_2?   @relation(fields: [task_2_Id], references: [id], onDelete: Cascade)
  task_lvl_3  Task_lvl_3?   @relation(fields: [task_3_Id], references: [id], onDelete: Cascade)
  users       TaskOnUsers[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ASSISTANT
  SUPER_MOD
  MOD
  EMPLOYEE
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  INREVIEW
  DENIED
  DONE
  LIQUIDATION
}

enum FileTypes {
  MATERIAL
  SUCCESSFUL
  REVIEW
}

enum ReportStatus {
  DECLINE
  PROCESS
  DONE
}

enum ReportStage {
  STEP_1
  STEP_2
  STEP_3
  STEP_4
  STEP_5
}

enum SupervisorTypes {
  ROLE_1
  ROLE_2
  ROLE_3
  ROLE_4
}

enum ListDetails {
  PUNTUAL
  TARDE
  SIMPLE
  GRAVE
  MUY_GRAVE
  PERMISO
}
