// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js" 
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int            @id @default(autoincrement())
  status       Boolean        @default(true)
  role         UserRole
  password     String
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  profile      Profile?
  WorkArea     WorkArea?      @relation(fields: [workAreaId], references: [id])
  workAreaId   Int?
  UsersOnTasks UsersOnTasks[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dni       String   @unique @db.VarChar(8)
  phone     String?  @unique
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkArea {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  users     Users[]
  tasks     Task[]
}

model Task {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  price        Decimal
  status       TaskRole
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WorkArea     WorkArea?      @relation(fields: [workAreaId], references: [id])
  workAreaId   Int?
  UsersOnTasks UsersOnTasks[]
}

model UsersOnTasks {
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  task      Task     @relation(fields: [taskId], references: [id])
  userId    Int
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, taskId])
}

enum UserRole {
  ADMIN
  EMPLOYEE
  MOD
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  DONE
}
