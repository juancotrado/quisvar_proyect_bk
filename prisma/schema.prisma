// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int           @id @default(autoincrement())
  status     Boolean       @default(true)
  role       UserRole      @default(EMPLOYEE)
  password   String
  email      String        @unique
  workAreaId Int?
  profile    Profiles?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  projects   Projects[]
  tasks      TaskOnUsers[]
}

model Profiles {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dni       String   @unique @db.VarChar(8)
  phone     String?  @unique
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkAreas {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  project     Projects[]
}

model Projects {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime  @default(now())
  untilDate   DateTime
  price       Float     @default(0)
  workAreaId  Int
  status      Boolean   @default(false)
  tasks       Tasks[]
  workAreas   WorkAreas @relation(fields: [workAreaId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Users       Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Tasks {
  id        Int           @id @default(autoincrement())
  name      String
  projectId Int
  status    TaskRole      @default(UNRESOLVED)
  project   Projects      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subtasks  SubTasks[]
  employees TaskOnUsers[]
}

model SubTasks {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  hours       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tasks       Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
}

model TaskOnUsers {
  taskId     Int
  userId     Int
  task       Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       Users    @relation(fields: [userId], references: [id], onUpdate: Cascade)
  assignedAt DateTime @default(now())

  @@id([taskId, userId])
}

enum UserRole {
  ADMIN
  EMPLOYEE
  MOD
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  DONE
}
