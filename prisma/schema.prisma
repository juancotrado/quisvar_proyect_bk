// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int           @id @default(autoincrement())
  status    Boolean       @default(true)
  role      UserRole      @default(EMPLOYEE)
  password  String
  email     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  profile   Profiles?
  area      WorkAreas[]
  project   Projects[]
  subTasks  TaskOnUsers[]
}

model Profiles {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dni       String   @unique @db.VarChar(8)
  phone     String?  @unique
  updatedAt DateTime @updatedAt
  userId    Int      @unique @map("user_id")
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Projects {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime    @default(now())
  untilDate   DateTime
  status      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      Int         @unique @map("coordinator")
  moderator   Users       @relation(fields: [userId], references: [id])
  areas       WorkAreas[]
}

model WorkAreas {
  id         Int          @id @default(autoincrement())
  name       String
  userId     Int          @unique @map("user_id")
  user       Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexTasks IndexTasks[]
  projects   Projects     @relation(fields: [projectId], references: [id])
  projectId  Int          @map("project_id")
}

model IndexTasks {
  id         Int       @id @default(autoincrement())
  name       String
  workAreaId Int       @map("work_area_id")
  workArea   WorkAreas @relation(fields: [workAreaId], references: [id])
  tasks      Tasks[]
}

model Tasks {
  id          Int        @id @default(autoincrement())
  name        String
  indexTaskId Int        @map("index_task_id")
  intexTask   IndexTasks @relation(fields: [indexTaskId], references: [id])
  subTasks    SubTasks[]
}

model SubTasks {
  id          Int           @id @default(autoincrement())
  status      TaskRole      @default(UNRESOLVED)
  name        String
  percentage  Int           @default(0)
  description String?
  price       Float
  hours       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  taskId      Int
  task        Tasks         @relation(fields: [taskId], references: [id])
  users       TaskOnUsers[]
}

model TaskOnUsers {
  subtaskId  Int
  userId     Int
  user       Users    @relation(fields: [userId], references: [id], onUpdate: Cascade)
  subtask    SubTasks @relation(fields: [subtaskId], references: [id], onUpdate: Cascade)
  assignedAt DateTime @default(now())

  @@id([subtaskId, userId])
}

enum UserRole {
  ADMIN
  EMPLOYEE
  MOD
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  DONE
}
