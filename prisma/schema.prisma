// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int        @id @default(autoincrement())
  status     Boolean    @default(true)
  role       UserRole   @default(EMPLOYEE)
  password   String
  email      String     @unique
  tasksId    Int?
  workAreaId Int?
  tasks      Tasks?     @relation(fields: [tasksId], references: [id])
  profile    Profiles?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  projects   Projects[]
}

model Profiles {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dni       String   @unique @db.VarChar(8)
  phone     String?  @unique
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkAreas {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  projects    Projects[]
}

model Projects {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime  @default(now())
  untilDate   DateTime
  price       Decimal   @default(0)
  workAreaId  Int
  tasks       Tasks[]
  workAreas   WorkAreas @relation(fields: [workAreaId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Users       Users     @relation(fields: [usersId], references: [id])
  usersId     Int
}

model Tasks {
  id        Int        @id @default(autoincrement())
  name      String
  projectId Int
  projects  Projects   @relation(fields: [projectId], references: [id])
  employees Users[]
  subtasks  SubTasks[]
}

model SubTasks {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  days        Int
  status      TaskRole @default(UNRESOLVED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tasks       Tasks    @relation(fields: [tasksId], references: [id])
  tasksId     Int
}

enum UserRole {
  ADMIN
  EMPLOYEE
  MOD
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  DONE
}
