generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int              @id @default(autoincrement())
  status       Boolean          @default(false)
  role         UserRole         @default(EMPLOYEE)
  password     String
  email        String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  contract     String?
  cv           String?
  declaration  String?
  profile      Profiles?
  files        Files[]
  project      Projects[]
  subTasks     TaskOnUsers[]
  Levels       Levels[]
  list         ListOnUsers[]
  stages       Stages[]
  message      Mail[]
  messageReply MessageHistory[]
  feedbacks    Feedback[]
}

model GeneralFiles {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  dir       String?
  createdAt DateTime @default(now())
}

model Profiles {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  dni         String   @unique @db.VarChar(8)
  phone       String?  @unique
  updatedAt   DateTime @updatedAt
  degree      String?
  job         String?
  description String?
  userId      Int      @unique
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sector {
  id           Int            @id @default(autoincrement())
  name         String
  specialities Specialities[]
}

model Specialities {
  id               Int                @id @default(autoincrement())
  name             String
  cod              String?
  sectorId         Int?
  createdAt        DateTime           @default(now())
  Sector           Sector?            @relation(fields: [sectorId], references: [id])
  typeSpecialities TypeSpecialities[]
}

model TypeSpecialities {
  id             Int           @id @default(autoincrement())
  name           String
  specialitiesId Int?
  projects       Projects[]
  Specialities   Specialities? @relation(fields: [specialitiesId], references: [id])
}

model Projects {
  id               Int              @id @default(autoincrement())
  CUI              String
  name             String           @unique
  description      String
  department       String
  province         String
  district         String
  percentage       Int              @default(30)
  // startDate        DateTime          @default(now())
  // untilDate        DateTime
  // status           Boolean           @default(false)
  // unique           Boolean           @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           Int?
  typeSpecialityId Int
  typeSpeciality   TypeSpecialities @relation(fields: [typeSpecialityId], references: [id])
  moderator        Users?           @relation(fields: [userId], references: [id])
  stages           Stages[]
  // company          Company?
  // consortium       Consortium?
  // specialists      PersonBussiness[]
}

model Stages {
  id           Int               @id @default(autoincrement())
  name         String
  //-----------------------------------------------------
  startDate    DateTime          @default(now())
  untilDate    DateTime          @default(now())
  status       Boolean           @default(false)
  moderatorId  Int?
  company      Company?          @relation(fields: [companyId], references: [id])
  consortium   Consortium?       @relation(fields: [consortiumId], references: [id])
  specialists  PersonBussiness[]
  rootTypeItem TypeItem          @default(ROM)
  moderator    Users?            @relation(fields: [moderatorId], references: [id])
  //-----------------------------------------------------
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  project      Projects          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    Int
  levels       Levels[]
  companyId    Int?
  consortiumId Int?
}

model Levels {
  id           Int        @id @default(autoincrement())
  item         String
  index        Int
  name         String
  level        Int        @default(0)
  rootLevel    Int
  typeItem     TypeItem   @default(NUM)
  rootTypeItem TypeItem   @default(NUM)
  isProject    Boolean    @default(false)
  isArea       Boolean    @default(false)
  isInclude    Boolean    @default(false)
  stagesId     Int
  userId       Int?
  rootId       Int
  subTasks     SubTasks[]
  user         Users?     @relation(fields: [userId], references: [id])
  stages       Stages     @relation(fields: [stagesId], references: [id], onDelete: Cascade)
}

model TaskOnUsers {
  subtaskId  Int
  userId     Int
  status     Boolean  @default(false)
  percentage Int      @default(0)
  untilDate  DateTime @default(now())
  subtask    SubTasks @relation(fields: [subtaskId], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([subtaskId, userId])
}

model SubTasks {
  id          Int           @id @default(autoincrement())
  status      TaskRole      @default(UNRESOLVED)
  item        String //@default("")
  index       Int
  typeItem    TypeItem      @default(NUM)
  name        String
  description String?
  price       Decimal       @db.Money
  days        Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  hasPDF      Boolean       @default(false)
  levels_Id   Int
  feedBacks   Feedback[]
  files       Files[]
  Levels      Levels        @relation(fields: [levels_Id], references: [id], onDelete: Cascade)
  users       TaskOnUsers[]
}

model Feedback {
  id         Int      @id @default(autoincrement())
  comment    String?
  status     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subTasksId Int
  userId     Int
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTasks   SubTasks @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
  files      Files[]
}

model Files {
  id         Int       @id @default(autoincrement())
  name       String
  userId     Int
  dir        String?
  type       FileTypes
  subTasksId Int
  feedbackId Int?
  assignedAt DateTime  @default(now())
  feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  subTasks   SubTasks  @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
  user       Users     @relation(fields: [userId], references: [id])
}

model PersonBussiness {
  id         Int     @id @default(autoincrement())
  name       String
  dni        String  @db.VarChar(8)
  cip        Int
  career     String
  phone      String
  pdf        String?
  projectsId Int?
  // Projects   Projects? @relation(fields: [projectsId], references: [id])
  stages     Stages? @relation(fields: [stagesId], references: [id])
  stagesId   Int?
}

model Consortium {
  id        Int       @id @default(autoincrement())
  name      String
  manager   String
  projectId Int       @unique
  companies Company[]
  // project   Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stages    Stages[]
}

model Company {
  id           Int         @id @default(autoincrement())
  name         String
  ruc          String
  manager      String
  percentage   Int         @default(100)
  consortiumId Int?
  projectId    Int?        @unique
  Consortium   Consortium? @relation(fields: [consortiumId], references: [id])
  // project      Projects?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stages       Stages[]
}

model Companies {
  id          Int       @id @default(autoincrement())
  name        String
  ruc         String    @unique @db.VarChar(11)
  manager     String
  address     String
  departure   String
  inscription DateTime?
  activities  DateTime?
  SEE         DateTime?
  CCI         String    @unique
  description String?
}

model AreaSpecialty {
  id             Int         @id @default(autoincrement())
  areaSpecialty  String?
  areaExperience String?
  specialistId   Int         @unique
  specialist     Specialists @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model Specialists {
  id        Int     @id @default(autoincrement())
  dni       String  @db.VarChar(8)
  firstName String
  lastName  String
  phone     String
  career    String
  degree    String
  agreement String?
  cv        String?
  area      AreaSpecialty[]
  price     String
}

model List {
  id        Int           @id @default(autoincrement())
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     ListOnUsers[]
}

model Licenses {
  id        Int            @id @default(autoincrement())
  usersId   Int
  reason    String?
  feedback  String?
  status    LicensesStatus @default(PROCESS)
  startDate DateTime
  untilDate DateTime
  createdAt DateTime       @default(now())
}

model ListOnUsers {
  usersId    Int
  listId     Int
  user       Users       @relation(fields: [usersId], references: [id], onDelete: Cascade)
  list       List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  status     ListDetails
  assignedAt DateTime    @default(now())

  @@id([usersId, listId])
}

model Mail {
  messageId  Int
  userId     Int
  message    Messages    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       MessageUser @default(RECEIVER)
  status     Boolean     @default(false)
  role       MessageRole @default(SECONDARY)
  assignedAt DateTime    @default(now())

  @@id([userId, messageId])
}

model Messages {
  id          Int              @id @default(autoincrement())
  title       String
  header      String           @default("")
  description String
  voucher     String?
  status      MessageStatus    @default(PROCESO)
  type        MessageType      @default(INFORME)
  files       FilesMessage[]
  users       Mail[]
  history     MessageHistory[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model MessageHistory {
  id          Int                   @id @default(autoincrement())
  title       String
  header      String                @default("")
  description String
  userId      Int
  user        Users                 @relation(fields: [userId], references: [id])
  files       FilesMessageHistory[]
  message     Messages?             @relation(fields: [messageId], references: [id])
  messageId   Int?
  createdAt   DateTime              @default(now())
}

model FilesMessage {
  id        Int       @id @default(autoincrement())
  attempt   String    @default("") //Date.getTime()
  name      String
  path      String
  messageId Int?
  message   Messages? @relation(fields: [messageId], references: [id])
  createdAt DateTime  @default(now())
}

model FilesMessageHistory {
  id        Int             @id @default(autoincrement())
  name      String
  path      String
  replyId   Int?
  reply     MessageHistory? @relation(fields: [replyId], references: [id])
  createdAt DateTime        @default(now())
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ASSISTANT
  SUPER_MOD
  MOD
  EMPLOYEE
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  INREVIEW
  DENIED
  DONE
  LIQUIDATION
}

enum FileTypes {
  MODEL
  UPLOADS
  REVIEW
  EDITABLES
}

enum ListDetails {
  PUNTUAL
  TARDE
  SIMPLE
  GRAVE
  MUY_GRAVE
  PERMISO
}

enum LicensesStatus {
  ACTIVE
  INACTIVE
  PROCESS
  DENIED
}

enum MessageUser {
  SENDER
  RECEIVER
}

enum MessageType {
  CARTA
  INFORME
  MEMORANDUM
  ACUERDO
  OFICIO
  COORDINACION
}

enum MessageRole {
  MAIN
  SECONDARY
}

enum MessageStatus {
  PROCESO
  RECHAZADO
  ARCHIVADO
  FINALIZADO
  POR_PAGAR
  PAGADO
  GUARDADO
}

enum TypeItem {
  ABC
  ROM
  NUM
}
