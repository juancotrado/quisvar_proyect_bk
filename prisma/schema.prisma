generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    Int                @id @default(autoincrement())
  status                Boolean            @default(false)
  // role                  UserRole           @default(EMPLOYEE)
  password              String
  email                 String             @unique
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  contract              String?
  cv                    String?
  declaration           String?
  withdrawalDeclaration String?
  ruc                   String?
  address               String?
  profile               Profiles?
  project               Projects[]
  subTasks              TaskOnUsers[]
  Levels                Levels[]
  list                  ListOnUsers[]
  stages                Stages[]
  message               Mail[]
  paymessage            PayMail[]
  messageReply          MessageHistory[]
  feedbacks             UsersOnFeedbacks[]
  equipment             Equipment?
  groups                GroupOnUsers[]
  moderatorOfGroup      Group[]
  Attendance            AttendanceGroup[]
  roleId                Int?
  role                  Role?              @relation(fields: [roleId], references: [id])
  verificationUser      VerificationUser?
  office                Office[]           @relation("OfficeToUsers")
}

model VerificationUser {
  id        Int       @id @default(autoincrement())
  token     String?
  code      String?
  expiresAt DateTime?
  user      Users     @relation(fields: [userId], references: [id])
  userId    Int       @unique
}

model Office {
  id        Int           @id @default(autoincrement())
  name      String
  user      Users[]       @relation("OfficeToUsers")
  paymesage PayMessages[]
  message   Messages[]
}

model WorkStation {
  id          Int         @id @default(autoincrement())
  name        String
  total       Int
  doc         String?
  description String?
  price       String
  equipment   Equipment[]
}

model Equipment {
  id            Int          @id @default(autoincrement())
  name          String
  doc           String?
  description   String?
  userId        Int?         @unique
  user          Users?       @relation(fields: [userId], references: [id])
  workStationId Int
  workStation   WorkStation? @relation(fields: [workStationId], references: [id])
}

model GeneralFiles {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  dir       String?
  createdAt DateTime @default(now())
}

model Profiles {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  firstNameRef String   @default("")
  lastNameRef  String   @default("")
  addressRef   String?  @default("")
  dni          String   @unique @db.VarChar(8)
  phone        String?  @unique
  phoneRef     String?  @default("")
  updatedAt    DateTime @updatedAt
  degree       String   @default("Egresado")
  job          String?
  description  String?
  department   String?
  province     String?
  district     String?
  room         String?
  gender       Gender   @default(F)
  userPc       String?
  usuario      String?
  userId       Int      @unique
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sector {
  id           Int            @id @default(autoincrement())
  name         String
  specialities Specialities[]
}

model Specialities {
  id               Int                @id @default(autoincrement())
  name             String
  cod              String?
  sectorId         Int?
  createdAt        DateTime           @default(now())
  Sector           Sector?            @relation(fields: [sectorId], references: [id])
  typeSpecialities TypeSpecialities[]
}

model TypeSpecialities {
  id             Int           @id @default(autoincrement())
  name           String
  specialitiesId Int?
  projects       Projects[]
  Specialities   Specialities? @relation(fields: [specialitiesId], references: [id])
}

model Group {
  id        Int            @id @default(autoincrement())
  name      String
  gNumber   Int?
  createdAt DateTime       @default(now())
  stage     Stages[]
  groups    GroupOnUsers[]
  active    Boolean        @default(true)
  modId     Int?
  moderator Users?         @relation(fields: [modId], references: [id])
  GroupList GroupList[]
}

model GroupOnUsers {
  userId  Int
  groupId Int
  active  Boolean @default(true)
  // Attendance AttendanceGroup[]
  users   Users   @relation(fields: [userId], references: [id])
  groups  Group   @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

model GroupList {
  id         Int               @id @default(autoincrement())
  file       String?
  nombre     String?
  title      String?
  createdAt  DateTime          @default(now())
  groupId    Int
  groups     Group             @relation(fields: [groupId], references: [id])
  attendance AttendanceGroup[]
  duty       Duty[]
}

model Duty {
  id        Int           @id @default(autoincrement())
  CUI       String
  project   String
  asitec    String?
  feedback  String?
  members   DutyMembers[]
  listId    Int
  createdAt DateTime      @default(now())
  groupList GroupList     @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model DutyMembers {
  id            Int     @id @default(autoincrement())
  position      String?
  fullName      String
  progress      String?
  lastMeeting   String?
  futureMeeting String?
  status        String
  request       String?
  dutyId        Int
  duty          Duty    @relation(fields: [dutyId], references: [id], onDelete: Cascade)
}

model AttendanceGroup {
  id          Int         @id @default(autoincrement())
  userId      Int
  groupListId Int
  description String?
  punish      String?
  status      ListDetails
  createdAt   DateTime    @default(now())
  group       GroupList   @relation(fields: [groupListId], references: [id])
  user        Users       @relation(fields: [userId], references: [id])
  // GroupOnUser GroupOnUsers @relation(fields: [userId, groupId], references: [userId, groupId])
}

model Projects {
  id               Int              @id @default(autoincrement())
  name             String?          @unique
  userId           Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  typeSpecialityId Int
  typeSpeciality   TypeSpecialities @relation(fields: [typeSpecialityId], references: [id])
  moderator        Users?           @relation(fields: [userId], references: [id])
  contractId       Int              @unique
  contract         Contratc         @relation(fields: [contractId], references: [id])
  stages           Stages[]
}

model Stages {
  id               Int           @id @default(autoincrement())
  name             String
  //-----------------------------------------------------
  startDate        DateTime      @default(now())
  untilDate        DateTime      @default(now())
  status           Boolean       @default(false)
  isProject        Boolean       @default(false)
  moderatorId      Int?
  rootTypeItem     TypeItem      @default(ROM)
  //-----------------------------------------------------
  // company          Company?          @relation(fields: [companyId], references: [id])
  // consortium       Consortium?       @relation(fields: [consortiumId], references: [id])
  // specialists      PersonBussiness[]
  moderator        Users?        @relation(fields: [moderatorId], references: [id])
  //-----------------------------------------------------
  bachelorCost     Float         @default(0)
  professionalCost Float         @default(0)
  graduateCost     Float         @default(0)
  internCost       Float         @default(0)
  groupId          Int?
  group            Group?        @relation(fields: [groupId], references: [id])
  //-----------------------------------------------------
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  project          Projects      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        Int
  levels           Levels[]
  basics           BasicLevels[]
  // companyId        Int?
  // consortiumId     Int?
}

model Levels {
  id           Int        @id @default(autoincrement())
  item         String
  index        Int
  name         String
  level        Int        @default(0)
  rootLevel    Int
  typeItem     TypeItem   @default(NUM)
  rootTypeItem TypeItem   @default(NUM)
  isProject    Boolean    @default(false)
  isArea       Boolean    @default(false)
  isInclude    Boolean    @default(false)
  stagesId     Int
  userId       Int?
  rootId       Int
  subTasks     SubTasks[]
  user         Users?     @relation(fields: [userId], references: [id])
  stages       Stages     @relation(fields: [stagesId], references: [id], onDelete: Cascade)
}

model BasicLevels {
  id           Int          @id @default(autoincrement())
  index        Int
  name         String
  level        Int          @default(0)
  rootLevel    Int
  typeItem     TypeItem     @default(NUM)
  rootTypeItem TypeItem     @default(NUM)
  isProject    Boolean      @default(false)
  isArea       Boolean      @default(false)
  isInclude    Boolean      @default(false)
  stagesId     Int
  userId       Int?
  rootId       Int
  subTasks     BasicTasks[]
  // user         Users?     @relation(fields: [userId], references: [id])
  stages       Stages       @relation(fields: [stagesId], references: [id], onDelete: Cascade)
}

model TaskOnUsers {
  subtaskId  Int
  userId     Int
  status     Boolean @default(false)
  percentage Int     @default(0)

  untilDate  DateTime @default(now())
  subtask    SubTasks @relation(fields: [subtaskId], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([subtaskId, userId])
}

model SubTasks {
  id          Int           @id @default(autoincrement())
  status      TaskRole      @default(UNRESOLVED)
  item        String //@default("")
  name        String
  index       Int
  typeItem    TypeItem      @default(NUM)
  description String?
  price       Decimal       @default(0) @db.Money
  days        Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // hasPDF      Boolean       @default(false)
  levels_Id   Int
  feedBacks   Feedback[]
  files       Files[]
  Levels      Levels        @relation(fields: [levels_Id], references: [id], onDelete: Cascade)
  users       TaskOnUsers[]
}

model BasicTasks {
  id        Int          @id @default(autoincrement())
  status    TaskRole     @default(UNRESOLVED)
  name      String
  index     Int
  typeItem  TypeItem     @default(NUM)
  days      Float
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  levels_Id Int
  files     BasicFiles[]
  Levels    BasicLevels  @relation(fields: [levels_Id], references: [id], onDelete: Cascade)
  // feedBacks   Feedback[]
  // users       TaskOnUsers[]
}

model Feedback {
  id         Int                @id @default(autoincrement())
  comment    String?
  status     Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  percentage Int                @default(0)
  subTasksId Int
  subTasks   SubTasks           @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
  files      Files[]
  users      UsersOnFeedbacks[]
}

model UsersOnFeedbacks {
  userId     Int
  feedbackId Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userMain   Boolean  @default(false)
  assignedAt DateTime @default(now())

  @@id([userId, feedbackId])
}

model Files {
  id         Int       @id @default(autoincrement())
  name       String
  userId     Int? //-----
  dir        String?
  type       FileTypes
  subTasksId Int
  feedbackId Int?
  assignedAt DateTime  @default(now())
  feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  subTasks   SubTasks  @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
}

model BasicFiles {
  id         Int        @id @default(autoincrement())
  name       String
  userId     Int?
  dir        String?
  type       FileTypes
  subTasksId Int
  feedbackId Int?
  assignedAt DateTime   @default(now())
  // feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  subTasks   BasicTasks @relation(fields: [subTasksId], references: [id], onDelete: Cascade)
}

model PersonBussiness {
  id         Int     @id @default(autoincrement())
  name       String
  dni        String  @db.VarChar(8)
  cip        Int
  career     String
  phone      String
  pdf        String?
  projectsId Int?
  // Projects   Projects? @relation(fields: [projectsId], references: [id])
  // stages     Stages? @relation(fields: [stagesId], references: [id])
  // stagesId   Int?
}

model Consortium {
  id        Int                     @id @default(autoincrement())
  name      String
  manager   String
  img       String?
  projectId Int?                    @unique
  contracts Contratc[]
  companies ConsortiumOnCompanies[]
  // companies Company[]
  // project   Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  // stages    Stages[]
}

// model Company {
//   id           Int    @id @default(autoincrement())
//   name         String
//   ruc          String
//   manager      String
//   percentage   Int    @default(100)
//   consortiumId Int?
//   projectId    Int?   @unique
//   // Consortium   Consortium? @relation(fields: [consortiumId], references: [id])
//   // project      Projects?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   // stages       Stages[]
// }

model Companies {
  id          Int                     @id @default(autoincrement())
  name        String
  ruc         String                  @unique @db.VarChar(11)
  manager     String
  address     String
  departure   String
  inscription DateTime?
  activities  DateTime?
  SEE         DateTime?
  CCI         String                  @unique
  description String?
  img         String?
  consortium  ConsortiumOnCompanies[]
  contracts   Contratc[]
}

model ConsortiumOnCompanies {
  consortiumId Int
  companiesId  Int
  consortium   Consortium @relation(fields: [consortiumId], references: [id])
  companies    Companies  @relation(fields: [companiesId], references: [id])

  @@id([consortiumId, companiesId])
}

model AreaSpecialty {
  id                  Int                   @id @default(autoincrement())
  institution         String
  startDate           DateTime?
  untilDate           DateTime?
  file                String?
  areaSpecialtyNameId Int
  areaSpecialtyName   AreaSpecialtyNameList @relation(fields: [areaSpecialtyNameId], references: [id], onDelete: Cascade)
}

model AreaSpecialtyNameList {
  id                Int             @id @default(autoincrement())
  specialtyName     String
  areaSpecialtyName AreaSpecialty[]
  specialistId      Int
  specialist        Specialists     @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model Specialists {
  id        Int                          @id @default(autoincrement())
  dni       String                       @unique @db.VarChar(8)
  firstName String
  lastName  String
  phone     String
  career    String
  degree    String
  agreement String?
  cv        String?
  area      AreaSpecialtyNameList[]
  training  TrainingSpecialistNameList[]
  price     String
  CIP       String
  email     String
  projects  ProjectSpecialist[]
}

model ProjectSpecialist {
  id           Int         @id @default(autoincrement())
  specialistId Int
  projectId    Int
  specialist   Specialists @relation(fields: [specialistId], references: [id])

  @@unique([specialistId, projectId])
}

model TrainingSpecialistNameList {
  id                     Int                  @id @default(autoincrement())
  trainingName           String
  trainingSpecialistName TrainingSpecialist[]
  specialistId           Int
  specialist             Specialists          @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model TrainingSpecialist {
  id                       Int                        @id @default(autoincrement())
  institution              String
  hours                    String
  issue                    DateTime?
  startDate                DateTime?
  untilDate                DateTime?
  trainingFile             String?
  TrainingSpecialistNameId Int
  specialist               TrainingSpecialistNameList @relation(fields: [TrainingSpecialistNameId], references: [id], onDelete: Cascade)
}

model List {
  id        Int           @id @default(autoincrement())
  title     String?
  timer     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     ListOnUsers[]
}

model Licenses {
  id        Int            @id @default(autoincrement())
  usersId   Int
  reason    String?
  feedback  String?
  status    LicensesStatus @default(PROCESO)
  fine      ListDetails?
  startDate DateTime
  checkout  DateTime?
  untilDate DateTime
  createdAt DateTime       @default(now())
}

model ListOnUsers {
  usersId    Int
  listId     Int
  user       Users       @relation(fields: [usersId], references: [id], onDelete: Cascade)
  list       List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  status     ListDetails
  assignedAt DateTime    @default(now())

  @@id([usersId, listId])
}

model Mail {
  messageId  Int
  userId     Int
  message    Messages    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       MessageUser @default(RECEIVER)
  status     Boolean     @default(false)
  role       MessageRole @default(SECONDARY)
  assignedAt DateTime    @default(now())
  userInit   Boolean     @default(false)

  @@id([userId, messageId])
}

model PayMail {
  paymessageId Int
  userId       Int
  paymessage   PayMessages @relation(fields: [paymessageId], references: [id], onDelete: Cascade)
  user         Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         MessageUser @default(RECEIVER)
  status       Boolean     @default(false)
  role         MessageRole @default(SECONDARY)
  assignedAt   DateTime    @default(now())
  userInit     Boolean     @default(false)

  @@id([userId, paymessageId])
}

model PayMessages {
  id     Int    @id @default(autoincrement())
  title  String
  header String @default("")

  paymentPdfData String           @default("")
  description    String
  filesPay       Payment[]
  status         PayMessageStatus @default(PROCESO)
  type           MessageType      @default(INFORME)
  files          FilesMessage[]
  users          PayMail[]
  history        MessageHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  office         Office?          @relation(fields: [officeId], references: [id])
  officeId       Int?
}

model Messages {
  id          Int              @id @default(autoincrement())
  title       String
  category    MessageCategory
  header      String
  description String
  status      MessageStatus    @default(PENDIENTE)
  type        MessageType      @default(INFORME)
  files       FilesMessage[]
  users       Mail[]
  history     MessageHistory[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  officeId    Int?
  office      Office?          @relation(fields: [officeId], references: [id])
}

model MessageHistory {
  id           Int                   @id @default(autoincrement())
  title        String
  header       String                @default("")
  description  String
  userId       Int
  user         Users                 @relation(fields: [userId], references: [id])
  files        FilesMessageHistory[]
  paymessage   PayMessages?          @relation(fields: [paymessageId], references: [id])
  paymessageId Int?
  message      Messages?             @relation(fields: [messageId], references: [id])
  messageId    Int?
  createdAt    DateTime              @default(now())
}

model FilesMessage {
  id           Int          @id @default(autoincrement())
  attempt      String       @default("") //Date.getTime()
  name         String
  path         String
  message      Messages?    @relation(fields: [messageId], references: [id])
  paymessage   PayMessages? @relation(fields: [paymessageId], references: [id])
  messageId    Int?
  paymessageId Int?
  createdAt    DateTime     @default(now())
}

model Payment {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  paymessageId Int?
  paymessage   PayMessages?   @relation(fields: [paymessageId], references: [id])
  files        FilesPayment[]
}

model FilesPayment {
  id        Int      @id @default(autoincrement())
  name      String
  path      String
  createdAt DateTime @default(now())
  paymentId Int?
  payment   Payment? @relation(fields: [paymentId], references: [id])
}

model FilesMessageHistory {
  id        Int             @id @default(autoincrement())
  name      String
  path      String
  replyId   Int?
  reply     MessageHistory? @relation(fields: [replyId], references: [id])
  createdAt DateTime        @default(now())
}

model Contratc {
  id             Int          @id @default(autoincrement())
  cui            String
  name           String
  contractNumber String       @default("")
  projectName    String
  department     String
  province       String
  district       String
  projectShortName      String?
  difficulty     Int
  createdAt      DateTime?     @default(now())
  isIndependent  Boolean      @default(false)
  indexContract  String
  details        String?
  type           ContractType @default(CONTRATO)
  phases         String       @default("[]")
  amount         Float        @default(0)
  projectId      Int? //@unique
  project        Projects?
  consortiumId   Int?
  companyId      Int?
  consortium     Consortium?  @relation(fields: [consortiumId], references: [id])
  company        Companies?   @relation(fields: [companyId], references: [id])
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  hierarchy  Int          @default(1)
  users      Users[]
  menuPoints MenuPoints[]
}

model MenuPoints {
  id            Int             @id @default(autoincrement())
  typeRol       MenuRol
  menuId        Int
  subMenuPoints SubMenuPoints[]
  roleId        Int?
  role          Role?           @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model SubMenuPoints {
  id           Int         @id @default(autoincrement())
  typeRol      MenuRol
  menuId       Int
  menuPointsId Int?
  menuPoints   MenuPoints? @relation(fields: [menuPointsId], references: [id], onDelete: Cascade)
}

model Logs {
  id    Int     @id @default(autoincrement())
  ip    String?
  query Json
}

enum MenuRol {
  MOD
  MEMBER
  VIEWER
  USER
}

enum Menus {
  home
  tramites
  especialidades
  asistencia
  lista_de_usuarios
  empresas
  especialistas
  indice_general
  grupos
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ASSISTANT
  ASSISTANT_ADMINISTRATIVE
  SUPER_MOD
  AREA_MOD
  MOD
  EMPLOYEE
}

enum TaskRole {
  UNRESOLVED
  PROCESS
  INREVIEW
  DENIED
  DONE
  LIQUIDATION
}

enum FileTypes {
  MODEL
  UPLOADS
  REVIEW
  EDITABLES
}

enum ListDetails {
  PUNTUAL
  TARDE
  SIMPLE
  GRAVE
  MUY_GRAVE
  PERMISO
}

enum LicensesStatus {
  ACTIVO
  ACEPTADO
  INACTIVO
  PROCESO
  DENEGADO
  ACTIVE
  INACTIVE
  PROCESS
  DENIED
}

enum MessageUser {
  SENDER
  RECEIVER
}

enum MessageType {
  CARTA
  INFORME
  MEMORANDUM
  ACUERDO
  OFICIO
  COORDINACION
  MEMORANDUM_GLOBAL
}

enum MessageRole {
  MAIN
  SECONDARY
}

enum PayMessageStatus {
  PROCESO
  RECHAZADO
  ARCHIVADO
  FINALIZADO
  POR_PAGAR
  PAGADO
  GUARDADO
}

enum MessageStatus {
  PENDIENTE
  RECHAZADO
  FINALIZADO
  ARCHIVADO
  ELIMINADO
}

enum TypeItem {
  ABC
  ROM
  NUM
}

enum MessageCategory {
  GLOBAL
  DIRECT
}

enum Gender {
  M
  F
}

enum ContractType {
  CONTRATO
  ORDEN_DE_SERVICIO
  CONTRATACION_DIRECTA
}
